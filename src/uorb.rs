/* automatically generated by rust-bindgen */

pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const __DARWIN_FD_SETSIZE: u32 = 1024;
pub const __DARWIN_NBBY: u32 = 8;
pub const NBBY: u32 = 8;
pub const FD_SETSIZE: u32 = 1024;
pub const __WORDSIZE: u32 = 64;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const ORB_MULTI_MAX_INSTANCES: u32 = 4;
pub type __int8_t = cty::c_schar;
pub type __uint8_t = cty::c_uchar;
pub type __int16_t = cty::c_short;
pub type __uint16_t = cty::c_ushort;
pub type __int32_t = cty::c_int;
pub type __uint32_t = cty::c_uint;
pub type __int64_t = cty::c_longlong;
pub type __uint64_t = cty::c_ulonglong;
pub type __darwin_intptr_t = cty::c_long;
pub type __darwin_natural_t = cty::c_uint;
pub type __darwin_ct_rune_t = cty::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [cty::c_char; 128usize],
    pub _mbstateL: cty::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = cty::c_long;
pub type __darwin_size_t = cty::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = cty::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = cty::c_int;
pub type __darwin_clock_t = cty::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = cty::c_long;
pub type __darwin_time_t = cty::c_long;
pub type u_int8_t = cty::c_uchar;
pub type u_int16_t = cty::c_ushort;
pub type u_int32_t = cty::c_uint;
pub type u_int64_t = cty::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = cty::c_uint;
pub type __darwin_fsfilcnt_t = cty::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [cty::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [cty::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::core::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void)>,
    pub __arg: *mut cty::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: cty::c_long,
    pub __opaque: [cty::c_char; 56usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: cty::c_long,
    pub __opaque: [cty::c_char; 40usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: cty::c_long,
    pub __opaque: [cty::c_char; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: cty::c_long,
    pub __opaque: [cty::c_char; 56usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: cty::c_long,
    pub __opaque: [cty::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: cty::c_long,
    pub __opaque: [cty::c_char; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: cty::c_long,
    pub __opaque: [cty::c_char; 192usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: cty::c_long,
    pub __opaque: [cty::c_char; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: cty::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [cty::c_char; 8176usize],
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = cty::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_char = cty::c_uchar;
pub type u_short = cty::c_ushort;
pub type u_int = cty::c_uint;
pub type u_long = cty::c_ulong;
pub type ushort = cty::c_ushort;
pub type uint = cty::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = i64;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut cty::c_char;
pub type daddr_t = i32;
pub type dev_t = __darwin_dev_t;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type mode_t = __darwin_mode_t;
pub type nlink_t = __uint16_t;
pub type id_t = __darwin_id_t;
pub type pid_t = __darwin_pid_t;
pub type off_t = __darwin_off_t;
pub type segsz_t = i32;
pub type swblk_t = i32;
pub type uid_t = __darwin_uid_t;
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = cty::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
pub type fd_mask = __int32_t;
pub type pthread_attr_t = __darwin_pthread_attr_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type intmax_t = cty::c_long;
pub type uintmax_t = cty::c_ulong;
#[doc = " Object metadata."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct orb_metadata {
    #[doc = "< unique object name"]
    pub o_name: *const cty::c_char,
    #[doc = "< object size"]
    pub o_size: u16,
    #[doc = "< object size w/o padding at the end (for logger)"]
    pub o_size_no_padding: u16,
    #[doc = "< semicolon separated list of fields (with type)"]
    pub o_fields: *const cty::c_char,
}
pub type orb_id_t = *const orb_metadata;
pub const ORB_PRIO_ORB_PRIO_MIN: ORB_PRIO = 1;
pub const ORB_PRIO_ORB_PRIO_VERY_LOW: ORB_PRIO = 25;
pub const ORB_PRIO_ORB_PRIO_LOW: ORB_PRIO = 50;
pub const ORB_PRIO_ORB_PRIO_DEFAULT: ORB_PRIO = 75;
pub const ORB_PRIO_ORB_PRIO_HIGH: ORB_PRIO = 100;
pub const ORB_PRIO_ORB_PRIO_VERY_HIGH: ORB_PRIO = 125;
pub const ORB_PRIO_ORB_PRIO_MAX: ORB_PRIO = 255;
#[doc = " Topic priority."]
#[doc = " Relevant for multi-topics / topic groups"]
pub type ORB_PRIO = u32;
#[doc = " ORB topic advertiser handle."]
#[doc = ""]
#[doc = " Advertiser handles are global; once obtained they can be shared freely"]
#[doc = " and do not need to be closed or released."]
#[doc = ""]
#[doc = " This permits publication from interrupt context and other contexts where"]
#[doc = " a file-descriptor-based handle would not otherwise be in scope for the"]
#[doc = " publisher."]
pub type orb_advert_t = *mut cty::c_void;
extern "C" {
    #[doc = " @see uORB::Manager::orb_advertise()"]
    #[link_name = "\u{1}_orb_advertise"]
    pub fn orb_advertise(meta: *const orb_metadata, data: *const cty::c_void) -> orb_advert_t;
}
extern "C" {
    #[doc = " @see uORB::Manager::orb_advertise()"]
    #[link_name = "\u{1}_orb_advertise_queue"]
    pub fn orb_advertise_queue(
        meta: *const orb_metadata,
        data: *const cty::c_void,
        queue_size: cty::c_uint,
    ) -> orb_advert_t;
}
extern "C" {
    #[doc = " @see uORB::Manager::orb_advertise_multi()"]
    #[link_name = "\u{1}_orb_advertise_multi"]
    pub fn orb_advertise_multi(
        meta: *const orb_metadata,
        data: *const cty::c_void,
        instance: *mut cty::c_int,
        priority: cty::c_int,
    ) -> orb_advert_t;
}
extern "C" {
    #[doc = " @see uORB::Manager::orb_advertise_multi()"]
    #[link_name = "\u{1}_orb_advertise_multi_queue"]
    pub fn orb_advertise_multi_queue(
        meta: *const orb_metadata,
        data: *const cty::c_void,
        instance: *mut cty::c_int,
        priority: cty::c_int,
        queue_size: cty::c_uint,
    ) -> orb_advert_t;
}
extern "C" {
    #[doc = " @see uORB::Manager::orb_unadvertise()"]
    #[link_name = "\u{1}_orb_unadvertise"]
    pub fn orb_unadvertise(handle: orb_advert_t) -> cty::c_int;
}
extern "C" {
    #[doc = " @see uORB::Manager::orb_publish()"]
    #[link_name = "\u{1}_orb_publish"]
    pub fn orb_publish(
        meta: *const orb_metadata,
        handle: orb_advert_t,
        data: *const cty::c_void,
    ) -> cty::c_int;
}
extern "C" {
    #[doc = " @see uORB::Manager::orb_subscribe()"]
    #[link_name = "\u{1}_orb_subscribe"]
    pub fn orb_subscribe(meta: *const orb_metadata) -> cty::c_int;
}
extern "C" {
    #[doc = " @see uORB::Manager::orb_subscribe_multi()"]
    #[link_name = "\u{1}_orb_subscribe_multi"]
    pub fn orb_subscribe_multi(meta: *const orb_metadata, instance: cty::c_uint) -> cty::c_int;
}
extern "C" {
    #[doc = " @see uORB::Manager::orb_unsubscribe()"]
    #[link_name = "\u{1}_orb_unsubscribe"]
    pub fn orb_unsubscribe(handle: cty::c_int) -> cty::c_int;
}
extern "C" {
    #[doc = " @see uORB::Manager::orb_copy()"]
    #[link_name = "\u{1}_orb_copy"]
    pub fn orb_copy(
        meta: *const orb_metadata,
        handle: cty::c_int,
        buffer: *mut cty::c_void,
    ) -> cty::c_int;
}
extern "C" {
    #[doc = " @see uORB::Manager::orb_check()"]
    #[link_name = "\u{1}_orb_check"]
    pub fn orb_check(handle: cty::c_int, updated: *mut bool) -> cty::c_int;
}
extern "C" {
    #[doc = " @see uORB::Manager::orb_stat()"]
    #[link_name = "\u{1}_orb_stat"]
    pub fn orb_stat(handle: cty::c_int, time: *mut u64) -> cty::c_int;
}
extern "C" {
    #[doc = " @see uORB::Manager::orb_exists()"]
    #[link_name = "\u{1}_orb_exists"]
    pub fn orb_exists(meta: *const orb_metadata, instance: cty::c_int) -> cty::c_int;
}
extern "C" {
    #[doc = " Get the number of published instances of a topic group"]
    #[doc = ""]
    #[doc = " @param meta    ORB topic metadata."]
    #[doc = " @return    The number of published instances of this topic"]
    #[link_name = "\u{1}_orb_group_count"]
    pub fn orb_group_count(meta: *const orb_metadata) -> cty::c_int;
}
extern "C" {
    #[doc = " @see uORB::Manager::orb_priority()"]
    #[link_name = "\u{1}_orb_priority"]
    pub fn orb_priority(handle: cty::c_int, priority: *mut i32) -> cty::c_int;
}
extern "C" {
    #[doc = " @see uORB::Manager::orb_set_interval()"]
    #[link_name = "\u{1}_orb_set_interval"]
    pub fn orb_set_interval(handle: cty::c_int, interval: cty::c_uint) -> cty::c_int;
}
extern "C" {
    #[doc = " @see uORB::Manager::orb_get_interval()"]
    #[link_name = "\u{1}_orb_get_interval"]
    pub fn orb_get_interval(handle: cty::c_int, interval: *mut cty::c_uint) -> cty::c_int;
}
pub type arming_state_t = u8;
pub type main_state_t = u8;
pub type hil_state_t = u8;
pub type navigation_state_t = u8;
pub type switch_pos_t = u8;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: cty::c_uint,
    pub fp_offset: cty::c_uint,
    pub overflow_arg_area: *mut cty::c_void,
    pub reg_save_area: *mut cty::c_void,
}
