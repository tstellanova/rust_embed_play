#![no_std]
use core::panic::PanicInfo;



//TODO import code generated by bingden at build time
//pub mod uorb {
//    include!(concat!(env!("OUT_DIR"), "/uorb_bindings.rs"));
//}
//# define ORB_DECLARE(_name)		extern "C" const struct orb_metadata __orb_##_name __EXPORT

#[allow(non_camel_case_types)]
#[allow(non_upper_case_globals)]
#[allow(non_snake_case)]
pub mod uorb {
    include!("uorb.rs");

    extern {
        //TODO generate a list of static ORB_IDs from msg files

        // #define ORB_DECLARE(_name)		extern "C" const struct orb_metadata __orb_##_name __EXPORT
        // #define ORB_ID(_name)		&__orb_##_name
        // ORB_DECLARE(sensor_combined);
        // declare: const struct orb_metadata __orb_sensor_combined
        // orbid: &__orb_sensor_combined
        // pub type orb_id_t = *const orb_metadata;
        pub static __orb_sensor_combined: orb_metadata;
    }
//    include!(concat!(env!("OUT_DIR"), "/uorb_bindings.rs")
}

#[no_mangle]
pub extern fn remote_add(lhs: u32, rhs: u32) -> u32 {
    lhs + rhs
}

#[no_mangle]
pub extern fn happy_testo(first: u32, second: u32) -> u32 {
    let foo = Happy::new(first,second);
    foo.testo()
}

#[no_mangle]
pub extern fn get_sub_metadata() -> uorb::orb_id_t {
    Happy::get_sub_address()
}



pub struct Happy {
    first: u32,
    second: u32,
    sensor_combined_sub: i32
}

impl Happy {
    fn new(first: u32, second: u32) -> Happy {
        let mut inst = Happy {
            first,
            second,
            sensor_combined_sub: -1
        };
        inst.setup_subs();
        inst
    }

    fn get_sub_address() -> uorb::orb_id_t {
        unsafe {
            &uorb::__orb_sensor_combined
        }
    }

    pub  fn testo(&self) -> u32 {
        let mut res: u32 = 0;
        unsafe {
            let mut checko: bool = false;
            let r_check = &mut checko as *mut bool;
            res = uorb::orb_check(self.sensor_combined_sub, r_check ) as u32;
            res = checko as u32;
        }
        res
        //self.first + self.second
    }

    fn setup_subs(&mut self) {
        unsafe {
            self.sensor_combined_sub = uorb::orb_subscribe(&uorb::__orb_sensor_combined);
        }
    }
}

impl Drop for Happy {

    fn drop(&mut self) {
        unsafe {
            uorb::orb_unsubscribe(self.sensor_combined_sub);
        }
    }
}



/// This function is called on panic.
#[panic_handler]
fn panic(_info: &PanicInfo) -> ! {
    loop {}
}
